import{_ as s,o as n,c as a,e}from"./app-8f4b6e6f.js";const o={},c=e(`<p>电路描述语言，先设计电路后写程序。</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/0bbfe3a0cae3a6a7f6cd9e8ee9a288b9.png" alt="image-20250418095630474" style="zoom:50%;"><p>端口列表有输入输出类型（input、output、inout），数据信号类型（wire，reg），信号位宽</p><p><code>output reg [3:0] S</code></p><p>若声明<code>4&#39;b100</code>则左补零为<code>0100</code></p><p><code>&amp;4&#39;0100</code>从左到右自己做与运算，结果只有一位</p><p><code>&gt;&gt;&gt;</code>算数右移，补符号位</p><p>assign 为连续赋值语句，只要输入改变，输出立刻计算，赋值目标必须是wire类型。</p><p>always为过程赋值语句，只当条件触发时执行，其余时间挂起。赋值目标必须是reg类型，条件分为边缘敏感和电平敏感：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>
    
<span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span>
        
<span class="token important">always @</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>  <span class="token important">always @</span><span class="token punctuation">(</span>a <span class="token keyword">or</span> b <span class="token keyword">or</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>区别：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token comment">// 只有当clk上升沿到来时才将D赋值给Q</span>
<span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    Q<span class="token operator">=</span>D
<span class="token keyword">end</span>
<span class="token comment">// 只要D变化就将D赋值给Q</span>
<span class="token important">always @</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    Q<span class="token operator">=</span>D
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>always语句顺序执行，其他的语句并行执行。</p><p>阻塞赋值和非阻塞赋值：</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/e97743f6c83497de0df14e4fbf80b659.png" alt="image-20250414104248623" style="zoom:50%;"><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/11cea7e82516284facd4a73ea5ba4b56.png" alt="image-20250414104305963" style="zoom:50%;"><p>并发执行逻辑：</p><img src="https://blog-zzys.oss-cn-beijing.aliyuncs.com/articles/2652cbd2b864c8db4e0c41543c8474e8.png" alt="image-20250418095827108" style="zoom:67%;">`,18),p=[c];function t(i,l){return n(),a("div",null,p)}const r=s(o,[["render",t],["__file","verilog.html.vue"]]);export{r as default};
